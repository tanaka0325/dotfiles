" plugins
filetype plugin indent on
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
call plug#begin('~/.vim/plugged')

"""
" utility
"""
" ctrl-p
Plug 'ctrlpvim/ctrlp.vim'
" fzf
" Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
" Plug 'junegunn/fzf.vim'
" filer
Plug 'cocopon/vaffle.vim'
" sandwich
Plug 'machakann/vim-sandwich'
" auto close
Plug 'mattn/vim-lexiv'
" jump
Plug 'easymotion/vim-easymotion'
" comment out
Plug 'tyru/caw.vim'
" replace
Plug 'markonm/traces.vim'

"""
" view
"""
" color scheme
Plug 'kaicataldo/material.vim', { 'branch': 'main' }
" statusline
Plug 'itchyny/lightline.vim'

"""
" git
"""
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'

"""
" languages
"""
" vim-lsp
" if (has('nvim'))
  " Plug 'neovim/nvim-lspconfig'
"   Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
"   Plug 'Shougo/deoplete-lsp'
"   Plug 'lighttiger2505/deoplete-vim-lsp'
" else
  Plug 'prabirshrestha/asyncomplete.vim'
  Plug 'prabirshrestha/asyncomplete-lsp.vim'
" endif
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
" go
Plug 'sebdah/vim-delve'
Plug 'mattn/vim-goimports'
" slim
Plug 'slim-template/vim-slim'
" coffee
Plug 'kchmck/vim-coffee-script'
" js
Plug 'prettier/vim-prettier', { 'do': 'yarn install' }
" ts
Plug 'leafgarland/typescript-vim'

call plug#end()

" load settings
runtime! _config/init/*.vim
runtime! _config/plugins/*.vim
runtime! _config/languages/*.vim
" call map(sort(split(globpath(&runtimepath, '_config/**/*.vim'))), {->[execute('exec "so" v:val')]})

" if (has('nvim'))
" lua <<EOF
"   require'nvim_lsp'.gopls.setup{}
" EOF
" 
" nnoremap <silent>gd    <cmd>lua vim.lsp.buf.declaration()<CR>
" nnoremap <silent><c-]> <cmd>lua vim.lsp.buf.definition()<CR>
" nnoremap <silent>K     <cmd>lua vim.lsp.buf.hover()<CR>
" 
" let g:deoplete#enable_at_startup = 1
" endif
" if (has('nvim'))
"   let g:deoplete#enable_at_startup = 1
" endif
